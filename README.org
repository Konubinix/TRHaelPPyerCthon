* TRHaelPPyerCthon: The Happy Trac RPC Python Helper
  TRHaelPPyerCthon is a set of functions to help you to be fast with trac management. It is basically a wrapper around the awesome [[http://trac-hacks.org/wiki/XmlRpcPlugin][xml rpc plugin for trac]] to perform meaningful tasks in one command.

  It is provided with TracCmd, a CLI application using it to have an interactive manipulation of trac.

  The fulfilled needs are:
  - easy to use,
  - usable in a stateless work-flow: each command may be called independently of the others,
  - allows fast manipulation of common tasks:
    - the fewer commands as possible to do anything,
    - allow commands to act on batches of objects (ticket, wiki page etc.).
  - customisable: it should provides hooks to be run in several places to allow the user to adapt it to his needs,

  TRHaelPPyerCthon is first of all a way for me to understand the trac xml rpc plugin.

  The name was chosen after the following:
  #+BEGIN_EXAMPLE
  Ha  ppy
Tr a       c
 R    P    C
       Py   thon
  H elp  er
----------------
TRHaelPPyerCthon
  #+END_EXAMPLE
  It does not make a lot of sense, but I like it.
* How to contribute?
  In my mind, this project is not mature enough to have a real bug report tool. You may yet email me any suggestion of improvement. I accept any kind of patching way: github pull requests, patch in emails (git format-patch is your friend.). Do not hesitate to send me anything that could make the tool better.
* Configuration
  - You MUST have the TRAC_CMDRC environment variable pointing to a file describing the information needed to connect to the trac project. It is in conf format and looks like
    #+BEGIN_SRC conf
      [server]
      # url of the trac web server
      url=www.trac_example.com
      # path to trac from the web server
      trac_path=/trac
      # used protocol
      protocol=https
      [report]
      # file storing information for differential reports
      last_time_file=~/trac_cmd_last_time.picle
    #+END_SRC
  - When trhaelppyercthon needs the user to edit something, it uses the EDITOR environment variable.
  - The BROWSER environment variable is used by trac_cmd.py to open web pages.
  - trac_cmd.py uses the TRAC_CMD_TEMPLATE_FILE environment variable to store templates of ticket you often create.
  - The authentication values are taken from the ~/.netrc file:
    #+BEGIN_EXAMPLE
    machine www.trac_example.com
    login my_login
    password some_password
    #+END_EXAMPLE
* How to install?
  :PROPERTIES:
  :ID:       a4449c9b-5af1-42f4-9b01-4dd017bfaca9
  :END:
  As usual with python packages
  #+BEGIN_SRC sh
    python setup.py install
  #+END_SRC
* How to use?
  - Get it from the repository.
  - Either install it via the usual setup.py command (see [[id:a4449c9b-5af1-42f4-9b01-4dd017bfaca9][How to install?]]) or set the PYTHONPATH environment variable to point to the cloned repository.
  - Use it:
    - You can use it in a python script:
      - You can use only the TPH:
#+BEGIN_SRC python
  from tph.trhaelppyercthon import TPH
  import xmlrpclib

  server = xmlrpclib.ServerProxy("trac_url")
  tph = TPH(server)
  # edit the ticket number 135
  tph.ticket_edit(135)
#+END_SRC
      - You can subclass the TracCmd:
#+BEGIN_SRC python
          from tph.trac_cmd import TracCmd
          import xmlrpclib

          class MyTracCmd(TracCmd):
              def do_my_tickets_stuff(self, line):
                  self.tph.ticket_create(...)

          server = xmlrpclib.ServerProxy("trac_url")
          cmd = MyTracCmd(server)
          cmd.cmdloop()
#+END_SRC
    - Or you can just use trac_cmd.py:
      - Make the environment variable PATH point to the cloned repository
      - launch trac_cmd.py
#+BEGIN_SRC sh
          trac_cmd.py
#+END_SRC
* Alternatives
** SD
   [[http://search.cpan.org/dist/App-SD/][SD]], the peer-to-peer bug tracker, looks terrific at first glance. Nonetheless, I did not manage to get the trac clone command work and I could not find any help in the irc chan. Moreover, it uses perl, that looks quite hard to read and understand.
** tracshell
   [[http://code.google.com/p/tracshell/][tracshell]] seems to do quite the same thing than TracCmd in spirit. I have not dug into its code, but it might already do everything that trhaelppyercthon does, and maybe better. Nevertheless, it does not appear to be maintained anymore and its code it hard to get into.
* What to do
** TODO Completion on fields
** TODO Nicer handling of the EDITOR
   #+BEGIN_SRC language
   EDITOR="emacs -nw" trac_cmd.py
   #+END_SRC
** TODO Allow the user to provide commands in the command line
   #+BEGIN_SRC language
   trac_cmd.py list_methods
   #+END_SRC
** TODO Handle wildcards
   #+BEGIN_SRC language
   (Cmd) wiki_attach_delete WikiStart/10*0
   #+END_SRC
* config                                                            :ARCHIVE:

# Local Variables:
# ispell-dictionary: "british"
# End:
